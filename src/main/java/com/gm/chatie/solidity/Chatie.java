package com.gm.chatie.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Chatie extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_AUTHENTICATE = "authenticate";

    public static final String FUNC_GETMESSAGEBYID = "getMessageById";

    public static final String FUNC_CLEARMESSAGES = "clearMessages";

    public static final String FUNC_GETFRIENDMSGS = "getFriendMsgs";

    public static final String FUNC_SENDMESSAGE = "sendMessage";

    public static final String FUNC_ACCEPTFRIENDREQUEST = "acceptFriendRequest";

    public static final String FUNC_GETMESSAGES = "getMessages";

    public static final String FUNC_CHECKREQESTSTATUS = "checkReqestStatus";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_GETFRIENDSIDS = "getFriendsIds";

    public static final String FUNC_SYNCMESSAGES = "syncMessages";

    public static final String FUNC_SEARCHACCOUNT = "searchAccount";

    public static final String FUNC_SENDFRIENDREQUEST = "sendFriendRequest";

    protected Chatie(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Chatie(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<Boolean> authenticate(BigInteger accountId, String password) {
        final Function function = new Function(FUNC_AUTHENTICATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accountId), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getMessageById(BigInteger id) {
        final Function function = new Function(FUNC_GETMESSAGEBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> clearMessages(BigInteger myAccountId, BigInteger friendAccountId) {
        final Function function = new Function(
                FUNC_CLEARMESSAGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myAccountId), 
                new org.web3j.abi.datatypes.generated.Uint256(friendAccountId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, List<BigInteger>>> getFriendMsgs(BigInteger myid, BigInteger frndid) {
        final Function function = new Function(FUNC_GETFRIENDMSGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myid), 
                new org.web3j.abi.datatypes.generated.Uint256(frndid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<BigInteger, List<BigInteger>>>(
                new Callable<Tuple2<BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple2<BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> sendMessage(BigInteger senderId, BigInteger receiverId, String msg1) {
        final Function function = new Function(
                FUNC_SENDMESSAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(senderId), 
                new org.web3j.abi.datatypes.generated.Uint256(receiverId), 
                new org.web3j.abi.datatypes.Utf8String(msg1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> acceptFriendRequest(BigInteger myAccountId, BigInteger friendAccountId) {
        final Function function = new Function(
                FUNC_ACCEPTFRIENDREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myAccountId), 
                new org.web3j.abi.datatypes.generated.Uint256(friendAccountId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getMessages(BigInteger accountId, BigInteger friendId) {
        final Function function = new Function(FUNC_GETMESSAGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accountId), 
                new org.web3j.abi.datatypes.generated.Uint256(friendId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> checkReqestStatus(BigInteger senderid, BigInteger friendid) {
        final Function function = new Function(FUNC_CHECKREQESTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(senderid), 
                new org.web3j.abi.datatypes.generated.Uint256(friendid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createAccount(BigInteger accountId, String name, String password) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accountId), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getFriendsIds(BigInteger myid) {
        final Function function = new Function(FUNC_GETFRIENDSIDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>>> syncMessages(BigInteger myAccountId) {
        final Function function = new Function(FUNC_SYNCMESSAGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myAccountId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple4<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple4<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<byte[]>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Uint256>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<Tuple2<BigInteger, String>> searchAccount(BigInteger accountId) {
        final Function function = new Function(FUNC_SEARCHACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(accountId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<BigInteger, String>>(
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> sendFriendRequest(BigInteger myAccountId, BigInteger friendAccountId) {
        final Function function = new Function(
                FUNC_SENDFRIENDREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(myAccountId), 
                new org.web3j.abi.datatypes.generated.Uint256(friendAccountId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Chatie> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Chatie.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Chatie> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Chatie.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Chatie load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Chatie(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Chatie load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Chatie(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
